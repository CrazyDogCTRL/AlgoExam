QuickSort (lomuto)

#include <iostream>
void Swap(int32_t& a, int32_t &b) {
    int temp = a;
    a = b;
    b = temp;
}
int PartionLomuto(int arr[], int left, int right) {
    int pivot = arr[right];
    int i = left - 1;
    for (int j = left; j < right; ++j) {
        if (arr[j] >= pivot) {
            ++i;
          if (arr[i] != arr[j])
            Swap(arr[i], arr[j]);
        }
    }
    Swap(arr[i + 1], arr[right]);
    return i + 1;
}
void QuickSort(int arr[], int left, int right) {
    if (left < right) {
        int idx = PartionLomuto(arr, left, right);
        QuickSort(arr, left, idx - 1);
        QuickSort(arr, idx + 1, right);
    }
}
int main() {
    int n = 0;
    std::cin >> n;
    auto *arr = new int[n];
    for (int i = 0; i < n; ++i) {
        std::cin >> arr[i];
    }
    QuickSort(arr, 0, n - 1);
    for (int i = 0; i < n; ++i) {
        std::cout << arr[i] << " ";
    }
    delete[] arr;
    return 0;
}

CountingSort (не устойчива)

#include <iostream>
int main() {
  int arr[11]{0,0,3,7,8,1,2,9,3,2,14};
  int A[15]{};
  for(int i = 0; i < 11; i++) {
    A[arr[i]]++;
  }
  int i = 0;
  for (int j = 0; j < 15; j++) {
    while (A[j]){
      arr[i] = j;
      A[j]--;
      i++;
    }
  }
  for (int j = 0; j < 11; j++) {
    std::cout << arr[j] << " ";
  }
}
