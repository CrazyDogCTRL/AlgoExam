//Односвязный список

#include <iostream>
template <typename T>
class List {
public:
  List();
  ~List();
  void PushBack(T data);
  int GetSize(){return size;};
  T & operator[](const int index);
  void PopFront();
  void Clear();
  void PushFront(T data);
  void Insert(T data, int index);
  void RemoveAt(int index);
  void PopBack();
private:
  
  class Node {
  public:
    Node* pnext;
    T data;
    Node(T data = T(), Node* pnext = nullptr) {
      this->data = data;
      this->pnext = pnext;
    }
  };
  int size;
  Node *head;
};

template <typename T>
List<T>::List() {
  size = 0;
  head = nullptr;
}

template <typename T>
void List<T>::PushBack(T data) {
  if (head == nullptr) {
    head = new Node(data);
  }
  else {
    Node *current = this->head;
    while (current->pnext != nullptr) {
      current = current->pnext;
    }
    current->pnext = new Node(data);
  }
  size++;
}

template <typename T>
T & List<T>::operator[](const int index) {
    int counter = 0;
    Node *current = this->head;

    while(current != nullptr) {
        if(counter == index) {
            return current->data;
        }
        current = current->pnext;
        counter++;
    }
      return T();
}


template <typename T>
void List<T>::PopFront() {
  Node *temp = head;
  head = head->pnext;
  delete temp;
  size--;
}

template <typename T>
void List<T>::Clear() {
  while (size) {
    PopFront();
  }
}

template <typename T>
void List<T>::PushFront(T data) {
  head = new Node(data, head);
  size++;
}

template <typename T>
void List<T>::Insert(T data, int index) {
  if (index == 0) {
    PushFront(data);
  }
  else {
    Node *previous = this->head;
    for (int i = 0; i < index - 1; i++) {
      previous = previous->pnext;
    }
    previous->pnext = new Node(data, previous->pnext);
    size++;
  }
}

template<typename T>
void List<T>::RemoveAt(int index)
{
  if (index == 0)
  {
    PopFront();
  }
  else
  {
    Node *previous = this->head;
    for (int i = 0; i < index - 1; i++)
    {
      previous = previous->pNext;
    }

    
    Node *toDelete = previous->pNext;

    previous->pNext = toDelete->pNext;

    delete toDelete;

    size--;
  }
}

template<typename T>
void List<T>::PopBack() {
  RemoveAt(size - 1);
}

template <typename T>
List<T>::~List() {
  Clear();
}

int main() {
  List<int> lol;
  lol.PushBack(7);
  lol.PushBack(8);
  lol.PushBack(10);
  lol.Insert(767, 2);
  std::cout << lol[2];
}
