НОП (LCS)

#include <iostream>

template <typename T>
T Max(T a, T b) {
  if (a > b) {
    return a;
  } else {
    return b;
  }
}

template <typename T>
void LCS(T* a, T* b, size_t n, size_t m) {
  auto** dp = new int*[n + 1];
  for (int i = 0; i <= n; i++) {
    dp[i] = new int[m + 1]{};
  }
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= m; j++) {
      dp[i][j] = Max(dp[i - 1][j], dp[i][j - 1]);
      if (a[i - 1] == b[j - 1]) {
        dp[i][j] = Max(dp[i - 1][j - 1] + 1, dp[i][j]);
      }
    }
  }
  int lcsLength = dp[n][m];
  T* lcs = new T[lcsLength];
  int index = lcsLength - 1;
  size_t i = n;
  size_t j = m;
  while (i > 0 && j > 0) {
    if (a[i - 1] == b[j - 1]) {
      lcs[index] = a[i - 1];
      i--;
      j--;
      index--;
    } else if (dp[i - 1][j] > dp[i][j - 1]) {
      i--;
    } else {
      j--;
    }
  }
  for (int i = 0; i < lcsLength; i++) {
    std::cout << lcs[i] << " ";
  }
  for (int i = 0; i <= n; i++) {
    delete[] dp[i];
  }
  delete[] dp;
  delete[] lcs;
}

int main() {
  size_t n;
  std::cin >> n;
  int* a = new int[n];
  for (int i = 0; i < n; i++) {
    std::cin >> a[i];
  }
  size_t m;
  std::cin >> m;
  int* b = new int[m];
  for (int i = 0; i < m; i++) {
    std::cin >> b[i];
  }
  LCS(a, b, n, m);
  delete[] a;
  delete[] b;
  return 0;
}
