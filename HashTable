#include <iostream>
#include <cstdint>
#include <cmath>
#include <algorithm>

class PolynomialHash {
public:
  int64_t operator()(const std::string &str) {
    const static int32_t p = 1000000007;
    const static int16_t x = 263;
    int64_t sum = 0;
    int64_t x_pow = 1;
    for (size_t i = 0; i < str.length(); i++) {
      sum = (sum + (str[i] * x_pow % p)) % p;
      x_pow = (x_pow * x) % p;
    }
    return sum;
  }
};

class HashTable {
private:
  class List {
  private:
    struct Node {
      Node *next;
      Node *prev;
      std::string key;
      Node(const std::string &key);
      Node(const std::string &key, Node *next, Node *prev);
    };
    
  public:
    List();
    void Insert(const std::string &key);
    void Remove(const std::string &key);
    bool Find(const std::string &key);
    void Print();
    ~List();
    
  private:
    Node *NodeFinder(const std::string &key);
    Node *head;
    Node *tail;
  };

public:
  HashTable(long long n_buckets);
  bool Find(const std::string &key);
  void Add(const std::string &key);
  void Check(long long bucket);
  void Remove(const std::string &key);
  ~HashTable();
  
private:
  const long long n_buckets;
  List *buckets;
  PolynomialHash hash;
};

HashTable::List::Node::Node(const std::string &key, Node *next, Node *prev) : key(key), next(next), prev(prev) {}

HashTable::List::Node::Node(const std::string &key) : Node(key, nullptr, nullptr) {}

HashTable::List::List() : head(nullptr), tail(nullptr) {}

HashTable::List::Node* HashTable::List::NodeFinder(const std::string &key) {
    Node* current = head;
    while (current != nullptr) {
        if (current->key == key) {
            return current;
        }
        current = current->next;
    }
    return nullptr;
}


void HashTable::List::Insert(const std::string &key) {
  if (head == nullptr) {
    auto new_node = new Node(key);
    head = new_node;
    tail = new_node;
    return;
  } else {
    auto new_node = new Node(key);
    tail->next = new_node;
    new_node->prev = tail;
    tail = new_node;
    return;
  }
}

bool HashTable::List::Find(const std::string &key) {
  return NodeFinder(key);
}

void HashTable::List::Remove(const std::string &key) {
  if (!Find(key)) {
    return;
  }
  auto *find_node = NodeFinder(key);
  if (find_node->next == nullptr && find_node->prev == nullptr) {
    head = nullptr;
    tail = nullptr;
  } else if (find_node->next == nullptr) {
    tail = find_node->prev;
    find_node->prev->next = nullptr;
  } else if (find_node->prev == nullptr) {
    head = find_node->next;
    find_node->next->prev = nullptr;
  } else {
    find_node->prev->next = find_node->next;
    find_node->next->prev = find_node->prev;
  }
  delete find_node;
  return;
}

void HashTable::List::Print()
{
    auto current = tail;
    while (current)
    {
        std::cout << current->key << " ";
        current = current->prev;
    }
}

HashTable::List::~List()
{
    Node *node = head;

    while (node)
    {
        Node *next_node = node->next;
        delete node;
        node = next_node;
    }
}

HashTable::HashTable(long long n_buckets) : n_buckets(n_buckets) {
  buckets = new List[n_buckets];
}

bool HashTable::Find(const std::string &key)
{
    long long index = hash(key) % n_buckets;
    return buckets[index].Find(key);
}

void HashTable::Add(const std::string &key)
{
    if (Find(key)) {
        return;
    }
    long long index = hash(key) % n_buckets;
    buckets[index].Insert(key);
}

void HashTable::Check(long long index)
{
    buckets[index].Print();
    std::cout << std::endl;
}

void HashTable::Remove(const std::string &key)
{
    long long index = hash(key) % n_buckets;
    buckets[index].Remove(key);
}

HashTable::~HashTable()
{
    delete[] buckets;
}

int main()
{
  std::ios::sync_with_stdio(0);
  std::cin.tie(0);
  std::cout.tie(0);
  long long m, n;
  std::cin >> m >> n;
  HashTable table(m);

  for (int i = 0; i < n; i++) {
    std::string command;
    std::cin >> command;
  if (command == "add")
    {
      std::string key;
      std::cin >> key;
      table.Add(key);
    } else if (command == "del") {
      std::string key;
      std::cin >> key;
      table.Remove(key);
      } else if (command == "find") {
        std::string key;
        std::cin >> key;
        std::cout << (table.Find(key) ? "yes" : "no") << std::endl;
      } else if (command == "check") {
        int num;
        std::cin >> num;
        table.Check(num);
      }
    }
  return 0;
}
