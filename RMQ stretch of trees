//RMQ (решение с деревом отрезков)
#include <iostream>
#include <algorithm>
#include <cmath>
const int INF = INT_MAX;

void build_tree(int* V, int n)
{
  int treeSize = (1 << (int)ceil(log2(n)));
  for (int i = 0; i < treeSize; i++) {
    V[i] = INF;
  }
  // инициализируем листы
  for (int i = n; i < 2 * n; i++)
    V[i] = V[i - n];

  // и все остальные вершины
  for (int i = n - 1; i >= 0; i--)
    V[i] = std::min(V[2 * i + 1], V[2 * i + 2]);
}

int rmq_up(int* V, int l, int r)
{
  int ans = INF;
  int n = sizeof(V) / sizeof(int);
  l += n - 1;
  r += n - 1;
  while (l <= r)
  {
    // если l - правый сын своего родителя,
    // учитываем его фундаментальный отрезок
    if (l % 2 == 0)
      ans = std::min(ans, V[l]);
    // если r - левый сын своего родителя,
    // учитываем его фундаментальный отрезок
    if (!(r % 2 == 0))
      ans = std::min(ans, V[r]);
    // сдвигаем указатели на уровень выше
    l = (l + 1) / 2;
    r = (r - 1) / 2;
  }
  return ans;
}
